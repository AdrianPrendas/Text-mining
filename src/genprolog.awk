# Generates prolog file from compose.awk output
# loriacarlos@gmail.com
# compose_output/composed_plan.txt --> prolog_output/study_plan.pl
# To run
# awk -f ./src/genprolog.awk ./compose_output/composed_plan.txt > prolog_output/study_plan_adr.pl
# Expected input record format generated by compose
# nn::code::description::credits[2345](::req)*::(bsc|dipl)::(level|_)::(cycle|_)
# req ~ EI(F|G)...O? | LIX...

BEGIN{
	print "%%%%% Study Plan %%%%%" > FILE
	print ":- discontiguous course/1." > FILE
	print ":- discontiguous course/8." > FILE
	print ":- discontiguous course_req/2." > FILE
	FS = "::" # Field separator
	RS = "\n" # Record separator
	print "starting"
}

function cast(romanNumber){
	switch(romanNumber){
		case "I": return 1
		case "II": return 2
		case "III": return 3
		case "IV": return 4
		case "_": return "none"
	}
}
function parse(type){
	switch(type){
		case /^(EIF|EIG)[0-9]{3}O/: return "optional"
		case /^Optativa/: return "generic"
		case /^(EIF|LIX|MAY|EstudiosGenerales)/: return "regular"

	}
}

{
	# nn::code::description::credits[2345](::req)*::(bsc|dipl)::(level|_)::(cycle|_)
	ciclo = cast($NF)
	nivel = cast($(NF-1))
	type = parse($2)

	printf "%% --- '%s' ---\n", $2 > FILE
	printf "course('%s').\n", $2 > FILE
	printf "course('%s', %s, %s, %s, %s, %s, %s, '%s' ).\n", $2, $1, type, $(NF-2), $4, nivel, ciclo, $3 > FILE

	if(NF>8){
		end = NF - 2
		start = 5
		for(i = start; i < end; i++){
			printf "course_req('%s', '%s').\n", $2, $i > FILE
		}
	}else{
			printf "course_req('%s', '%s').\n", $2, $5 > FILE
	}
	printf "."
}

END{
	# code
	# code, nn, regular, dipl, credi, ciclo, nivel, nombre
	# code, req
	print("\nend of the program")
}
